buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5+'
        classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.3"
    }
}

import net.minecraftforge.forge.tasks.*
import org.jetbrains.gradle.ext.*

apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle.patcher'
apply plugin: "org.jetbrains.gradle.plugin.idea-ext"

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    shade
    compile.extendsFrom shade
}

group = 'com.workerai'
version = '1.0.0'

ext {
    minecraft_version = '1.18.2'
    mcp_version = '20220228.144236'
    mappings_channel = 'official'
    mappings_version = '1.18.2'
    spi_version = '4.0.10'
}

repositories {
    mavenCentral()

    maven {
        url 'https://litarvan.github.io/maven'
    }
}

dependencies {
    implementation 'net.minecraftforge:forgespi:' + spi_version

    implementation 'fr.litarvan:openauth:1.1.2'
    implementation 'org.ow2.asm:asm:5.0.3'
    implementation 'org.reflections:reflections:0.9.12'

    shade 'org.ow2.asm:asm:5.0.3'
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.18"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}

task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

idea.project.settings {
    runConfigurations {
        "Minecraft"(Application) {
            mainClass = 'com.workerai.client.LaunchWrapper'
            workingDirectory = "$projectDir/run"
            moduleName = idea.module.name + '.main'
        }
    }
}